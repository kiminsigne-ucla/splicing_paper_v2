#########################################################
# generating bed files for included exons to subset ExAC VCF variants
lib$lib.seq_region_start <- (lib$lib.seq_region_start + 9)  # 1-based conversion to 0-based (.bed)
lib$lib.seq_region_end <- (lib$lib.seq_region_end - 10)
chr_order <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "X", "Y")
exon_bed <- lib %>%
dplyr::select ((1:25)) %>%
mutate (chr = factor(chr, levels = chr_order)) %>%
arrange (chr, lib.seq_region_start, lib.seq_region_end, strand)
exon_bed <- exon_bed[,c(2,3,4,1,15,5)]   #extract relevant columns in .bed column order
# exporting .bed file for parsing ExAC variants
write.table(exon_bed, file = "exons.bed", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "")
# 0-based coordinate conversion back to 1-based
# remove subsetting lib: [1:10][161:170]
lib$lib.seq_region_start <- (lib$lib.seq_region_start - 9)
lib$lib.seq_region_end <- (lib$lib.seq_region_end + 10)
############################################################################################################################################################################################################################################
# Read parsed VCF file (.tsv) (test)
# vcf <- read_tsv("./test_vcf/12345.tsv", col_names = TRUE,
#                 col_types = list("chrom" = col_character()),
#                 locale = default_locale(), na = c("", "NA"), comment = "", trim_ws = TRUE, skip = 0, n_max = -1, progress = interactive()) %>%
#        gather(alt_allele_num, alt, alt1:alt3) %>%    # tidying alternate alleles in long format
#        arrange(chrom, pos) %>%
#        na.omit
# Read parsed VCF file (.tsv) (library)
vcf <- read_tsv("./exac_vcf/chr1.tsv", col_names = TRUE,
col_types = list("chrom" = col_character(),  "alt1" = col_character(),  "alt2" =
col_character(), "alt3" = col_character()),
locale = default_locale(), na = c("", "NA"), comment = "", trim_ws = TRUE, skip = 0, progress = interactive())        %>%
gather(alt_allele_num, alt, alt1:alt3) %>%    # tidying alternate alleles in long format
arrange(chrom, pos) %>%
na.omit
# #turn alternative allele to lower case [does not work on DNAString, always keep UPPER]
# vcf$alt <- tolower(vcf$alt)
###################################################################################
#### BROKEN SPLICE SIGNAL CONTROLS ################################################
###################################################################################
# Mutate library from strand negative, reverseComplement
lib <- lib %>%
mutate (intron2_len = ifelse ( (strand == "-"), (170 - exon_len - intron2_len), intron2_len),    # for broken signals and sanity check
intron1_len = ifelse ( (strand == "-"), (170 - exon_len - intron1_len), intron1_len) )   # for broken signals and sanity check
#Get intron and exon sequences
lib$intron1 <- substr(lib$seq, 1, lib$intron1_len)
lib$exon <- substr(lib$seq, lib$intron1_len + 1, lib$exon_len + lib$intron1_len)
lib$intron2 <- substr(lib$seq, lib$exon_len + lib$intron1_len + 1, lib$exon_len + lib$intron1_len + lib$intron2_len)
lib2 <- lib %>% dplyr::select(ensembl_id, intron1, intron1_len, exon, exon_len, intron2, intron2_len)
write.table(lib2, file = "xtron_seq.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
lib %>% summarise(
seq = mean (nchar(seq),na.rm = TRUE),
intron1_len = mean (intron1_len, na.rm = TRUE),
exon_len = mean (exon_len, na.rm = TRUE),
intron2_len = mean (intron2_len, na.rm = TRUE)
)
# Sanity check of dinucleotides
lib$exon51 <- substr(lib$exon, 1, 1)
lib$exon31 <- str_sub(lib$exon, -1, -1)   #get 3' exon nucleotide
lib$intron3ss <- str_sub(lib$intron1, -2, -1)  #get 5' intron dinucleotide
lib$intron5ss <- substr(lib$intron2, 1, 2)   #get 3' intron dinucleotide
# Generate broken splice signal control library
# replace [intron5 (5' splice site) GT -> CC, intron3 (3' splice site): AG -> TT]
lib$broken_seq <- lib$seq  #initiate
lib$broken_intron1<- lib$intron1
lib$broken_intron2<- lib$intron2
#Get intron and exon seq_senseuences
str_sub(lib$broken_intron1, -2, -1) <- "TT"   # 3' splice site
substr(lib$broken_intron2, 1, 2) <- "CC"   # 5' splice site
# Sanity check of broken dinucleotides, not stored
lib$broken_intron1   #make sure all TT
lib$broken_intron2   #make sure all CC
#generating broken sequence for each template
lib$broken_seq <- paste (lib$broken_intron1, lib$exon, lib$broken_intron2, sep="")
# Mutate intron lengths back to strand-agnostic mode
lib$seq_sense <- lib$seq
###################################################################################
################## Convert to DNAString object ####################################
###################################################################################
lib$seq_sense <- parallel::mclapply(lib$seq_sense, DNAString)
lib$broken_seq <- parallel::mclapply(lib$broken_seq, DNAString)
###################################################################################
###################################################################################
lib <- lib %>%
mutate (
seq_sense = ifelse ( (strand == "-"), parallel::mclapply(seq_sense, reverseComplement), seq_sense ),   # for coordinate-based parsing in main SNP replacement
intron2_len = ifelse ( (strand == "-"), (170 - exon_len - intron2_len), intron2_len),    # Mutate intron lengths back to strand-agnostic mode
intron1_len = ifelse ( (strand == "-"), (170 - exon_len - intron1_len), intron1_len) )   # Mutate intron lengths back to strand-agnostic mode
# subsetting vcf for testing
# vcf <- vcf[1:20,]
# intron and exon lengths INFO for "i"
len_header <- function(len1, len2, len3) {paste("len=", len1, ".", len2, ".", len3, sep = "") }
xtron_len <- mapply(len_header, lib$intron1_len, lib$exon_len, lib$intron2_len)
# location INFO parse for "i"
loc_parse <- function(chr, start, end) {paste("chr", chr, ":", start, "-", end, sep = "") }
loc_info <- mapply(loc_parse, lib$chr, lib$lib.seq_region_start, lib$lib.seq_region_end, USE.NAMES=FALSE)
# SEQ "i" info
basic_seq_info <-paste(loc_info, "strand=", lib$strand, xtron_len)
# SNP INFO parse for "j"
vcf_header <- function(ref, alt, pos) {paste("ref=", ref, "alt=", alt, "pos=", pos, sep = " ") }
SNP_info <- mapply(vcf_header, vcf$ref, vcf$alt, vcf$pos, USE.NAMES=FALSE)
#######################################
############## SUBPOOL 1 ##############
#######################################
subpoo1_1_assembly <- function(x) { DNAStringSet ( parallel::mclapply ( x, function(x) (xscat(primerRE_1_5, x, REprimer_1_3 )) ) )}
# NATURAL LIBRARY (SUBPOOL 1)
nat_lib <- subpoo1_1_assembly(lib$seq)
# CONTROLS (SUBPOOL 1)
random_exon <- subpoo1_1_assembly(random_exon_temp)
skip <- subpoo1_1_assembly(lib_skip$seq)
int <- subpoo1_1_assembly(lib_int$seq)
broken_seq <- subpoo1_1_assembly(lib$broken_seq)
#######################################
############## SUBPOOL 2 ##############
#######################################
subpoo1_2_assembly <- function(x) { DNAStringSet ( parallel::mclapply ( x, function(x) (xscat( primerRE_2_5, x, REprimer_2_3 )) ) )}
# NATURAL LIBRARY (SUBPOOL 1)
nat_lib_backup <- subpoo1_2_assembly(lib$seq)
# CONTROLS (SUBPOOL 1)
random_exon_backup <- subpoo1_2_assembly(random_exon_temp)
skip_backup <- subpoo1_2_assembly(lib_skip$seq)
int_backup <- subpoo1_2_assembly(lib_int$seq)
broken_seq_backup <- subpoo1_2_assembly(lib$broken_seq)
nat_header <- function(id, info) {paste( id, "_", "000", " ", info, sep = "") }
nat_seq_info  <- mapply( nat_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
broken_header <- function(id, info) {paste( id, "_", "BRK", " ", info, " ", "ref: A,G; alt= T,T", " ", "ref= G,T; alt= C,C", sep = "") }
broken_seq_info  <- mapply( broken_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
skip_header <- function(id, info) {paste( id, "_", "SKP", " ", info, sep = "") }
broken_seq_info  <- mapply( skip_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
#function for naming entries of DNAStringSet or lists
nameDNAStringSet <- function(sub_lib,sub_info) {
for (i in 1:length(sub_lib))
{
names(sub_lib)[i] <- sub_info[i]
}
return(sub_lib)
}
#naming natural template libraries and controls related to natural templates
nat_lib <- nameDNAStringSet( nat_lib, nat_seq_info )
skip <- nameDNAStringSet( skip, skip_seq_info )
###############################################################################################################
###############################################################################################################
# Assigning to data-frame
df <- read_csv("1605_nat_countsPerbin.csv", col_names = TRUE, locale = default_locale(), na = c("", "NA"), comment = "", trim_ws = TRUE, skip = 0, progress = interactive())
# Get exon coordinates
df$strand <- gsub("strand=", "", df$strand)
df$len <- gsub("len=", "", df$len)
df.id <- df %>%
separate(lib.seq_region, c("lib.seq_region_tmp","lib.seq_region_end"), "-") %>%
separate(lib.seq_region_tmp, c("chr","lib.seq_region_start"), ":") %>%
mutate_each(funs(as.numeric), starts_with("lib")) %>%
extract(len, c("intron1_len","exon_len","intron2_len"), "([[:alnum:]]+).([[:alnum:]]+).([[:alnum:]]+)") %>%
mutate_each(funs(as.numeric), ends_with("len"))
df.id$chr <- gsub("chr", "", df.id$chr)
df.id$strand <- gsub("-1", "-", df.id$strand)
df.id$strand <- gsub("1", "+", df.id$strand)
#INTRONS AND EXONS Misc. counting statistics
df.id %>% summarise(nat_seq_sum = sum(category == "nat_seq"))
df.id <- na.omit(df.id)  #omit NA (rand lines)
################################################################
########## NEW DATASET (may 2016) ##############################
################################################################
# Biological replica-specific exon counts
df.id_rep <- df.id %>%
mutate (all_r1  = r1.dp + r1.sp + r1.int, all_r2 = r2.dp + r2.sp + r2.int) %>%
filter (all_r1 >= 5 | all_r2 >= 5)
# Normalization based on read counts and bin distribution
readCount <- c(527, 527, 101, 26, 293, 466, 714, 110, 33, 246)     #unit: (M) million
binDist <- c(34.6, 36.3, 7.7, 2.4, 100, 36.5, 38.8, 7.8, 2.7, 100)    #unit: percentage
normFactor <- readCount / binDist
df.id_rep[11:20] <- data.frame(mapply('/',df.id_rep[11:20], normFactor, SIMPLIFY=FALSE))
# Rounding indexes
df.id_rep <- df.id_rep %>%
mutate (index_r1 = round ( (r1.dp*1 + r1.int*0.5 + r1.sp*0) / (r1.dp + r1.int + r1.sp), 2),
index_r2 = round ( (r2.dp*1 + r2.int*0.5 + r2.sp*0) / (r2.dp + r2.int + r2.sp), 2),
index_new = (index_r1 + index_r2) / 2 )
##################################################################################################################
##################################################### EXAC_LIBRARY ############################################### ##################################################################################################################
# SNP_LIBRARY subsetting based on splicing readout from NGS
# Filtering for retained exons (main library)
lib <- df.id_rep  %>%
filter (index_new <= 0.5, all_r1 >= 5 | all_r2 >= 5)
# dplyr::select (ensembl_id, strand, lib.seq_region_start, lib.seq_region_end, seq)
# 100 skipped exons as control
lib_skip <- df.id_rep  %>%
filter (index_new == 1, all_r1 >= 185 & all_r2 >= 185)
# dplyr::select (ensembl_id, strand, lib.seq_region_start, lib.seq_region_end, seq)
# 20 intermediate exons as control
lib_int <- df.id_rep  %>%
filter (index_new == 0.5, all_r1 >= 5 & all_r2 >= 5)
# dplyr::select (ensembl_id, strand, lib.seq_region_start, lib.seq_region_end, seq)
# 40 random skipped exons
random_exon_temp <- readDNAStringSet("./fasta/random_exons.fasta", format="fasta")
########################################################################################################################################################################################################################################
# LIBRARY OLIGO PARTS
### subpool primers 15-mer
fwd_primer <- readDNAStringSet("./fasta/fwd_primers_exac.fasta", format="fasta")
names(fwd_primer) <- gsub("(^[[:print:]]{7,13})([[:space:]]{1,})([[:print:]]{0,}$)", "\\1", names(fwd_primer))   # take first column from FASTA header
# reverse primer assumed to be given in 3' to 5' on bottom strand, need to reverse complement
rev_primer <- readDNAStringSet("./fasta/rev_primers_exac.fasta", format="fasta")
names(rev_primer) <- gsub("(^[[:print:]]{7,13})([[:space:]]{1,})([[:print:]]{0,}$)", "\\1", names(rev_primer))   # take first column from FASTA header
#subpool primer sequences ready for appending to library sequences
primer_1F <- fwd_primer$subpool_1_F
primer_1R <- reverseComplement(rev_primer$subpool_1_R)  #revComp reverse primer for library oligo
primer_2F <- fwd_primer$subpool_2_F
primer_2R <- reverseComplement(rev_primer$subpool_2_R)  #revComp reverse primer for library oligo
# LIBRARY RESTRICTION SITES
RE <- readDNAStringSet("./fasta/restriction_sites.fasta", format="fasta")
RE1 <- RE$AgeI   #AgeI: ACCGGT
RE2 <- RE$NheI   #NheI: GCTAGC
primerRE_1_5 <- xscat ( primer_1F, RE1 )
REprimer_1_3 <- xscat ( RE2, primer_1R )
primerRE_2_5 <- xscat ( primer_2F, RE1 )
REprimer_2_3 <- xscat ( RE2, primer_2R )
# RESTRICTION SITE PARSER
RE_parse <- function (x, col_name) {
col_name <- deparse(substitute(col_name))
x <- x[!grepl(RE1, x[[col_name]]),]
x <- x[!grepl(RE2, x[[col_name]]),]
}
### remove natural sequences containing RE1 and RE2 necessary for library amplification BEFORE SNP_lib generation
### we want mutant sequences in cases only when the natural cases do not already contain RE1 and RE2
lib <- RE_parse(lib, seq)                #natural template for generating SNP library
lib_skip <- RE_parse(lib_skip, seq)      #100 skipped sequences as control
lib_int <- RE_parse(lib_int, seq)        #20 intermediate sequences as control
#sanity checks for subpool forward and reverse primers
# toMatch <- c(as.character(RE1),as.character(RE2))
# if ( grep(paste(toMatch,collapse="|"), RE$AgeI) = 1)
#   stop("Elements of your input vector do not have correct sequences!")
#########################################################
########## BED FILE for INCLUDED EXONS ##################
#########################################################
# generating bed files for included exons to subset ExAC VCF variants
lib$lib.seq_region_start <- (lib$lib.seq_region_start + 9)  # 1-based conversion to 0-based (.bed)
lib$lib.seq_region_end <- (lib$lib.seq_region_end - 10)
chr_order <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "X", "Y")
exon_bed <- lib %>%
dplyr::select ((1:25)) %>%
mutate (chr = factor(chr, levels = chr_order)) %>%
arrange (chr, lib.seq_region_start, lib.seq_region_end, strand)
exon_bed <- exon_bed[,c(2,3,4,1,15,5)]   #extract relevant columns in .bed column order
# exporting .bed file for parsing ExAC variants
write.table(exon_bed, file = "exons.bed", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "")
# 0-based coordinate conversion back to 1-based
# remove subsetting lib: [1:10][161:170]
lib$lib.seq_region_start <- (lib$lib.seq_region_start - 9)
lib$lib.seq_region_end <- (lib$lib.seq_region_end + 10)
############################################################################################################################################################################################################################################
# Read parsed VCF file (.tsv) (test)
# vcf <- read_tsv("./test_vcf/12345.tsv", col_names = TRUE,
#                 col_types = list("chrom" = col_character()),
#                 locale = default_locale(), na = c("", "NA"), comment = "", trim_ws = TRUE, skip = 0, n_max = -1, progress = interactive()) %>%
#        gather(alt_allele_num, alt, alt1:alt3) %>%    # tidying alternate alleles in long format
#        arrange(chrom, pos) %>%
#        na.omit
# Read parsed VCF file (.tsv) (library)
vcf <- read_tsv("./exac_vcf/chr1.tsv", col_names = TRUE,
col_types = list("chrom" = col_character(),  "alt1" = col_character(),  "alt2" =
col_character(), "alt3" = col_character()),
locale = default_locale(), na = c("", "NA"), comment = "", trim_ws = TRUE, skip = 0, progress = interactive())        %>%
gather(alt_allele_num, alt, alt1:alt3) %>%    # tidying alternate alleles in long format
arrange(chrom, pos) %>%
na.omit
# #turn alternative allele to lower case [does not work on DNAString, always keep UPPER]
# vcf$alt <- tolower(vcf$alt)
###################################################################################
#### BROKEN SPLICE SIGNAL CONTROLS ################################################
###################################################################################
# Mutate library from strand negative, reverseComplement
lib <- lib %>%
mutate (intron2_len = ifelse ( (strand == "-"), (170 - exon_len - intron2_len), intron2_len),    # for broken signals and sanity check
intron1_len = ifelse ( (strand == "-"), (170 - exon_len - intron1_len), intron1_len) )   # for broken signals and sanity check
#Get intron and exon sequences
lib$intron1 <- substr(lib$seq, 1, lib$intron1_len)
lib$exon <- substr(lib$seq, lib$intron1_len + 1, lib$exon_len + lib$intron1_len)
lib$intron2 <- substr(lib$seq, lib$exon_len + lib$intron1_len + 1, lib$exon_len + lib$intron1_len + lib$intron2_len)
lib2 <- lib %>% dplyr::select(ensembl_id, intron1, intron1_len, exon, exon_len, intron2, intron2_len)
write.table(lib2, file = "xtron_seq.tsv", append = FALSE, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
lib %>% summarise(
seq = mean (nchar(seq),na.rm = TRUE),
intron1_len = mean (intron1_len, na.rm = TRUE),
exon_len = mean (exon_len, na.rm = TRUE),
intron2_len = mean (intron2_len, na.rm = TRUE)
)
# Sanity check of dinucleotides
lib$exon51 <- substr(lib$exon, 1, 1)
lib$exon31 <- str_sub(lib$exon, -1, -1)   #get 3' exon nucleotide
lib$intron3ss <- str_sub(lib$intron1, -2, -1)  #get 5' intron dinucleotide
lib$intron5ss <- substr(lib$intron2, 1, 2)   #get 3' intron dinucleotide
# Generate broken splice signal control library
# replace [intron5 (5' splice site) GT -> CC, intron3 (3' splice site): AG -> TT]
lib$broken_seq <- lib$seq  #initiate
lib$broken_intron1<- lib$intron1
lib$broken_intron2<- lib$intron2
#Get intron and exon seq_senseuences
str_sub(lib$broken_intron1, -2, -1) <- "TT"   # 3' splice site
substr(lib$broken_intron2, 1, 2) <- "CC"   # 5' splice site
# Sanity check of broken dinucleotides, not stored
lib$broken_intron1   #make sure all TT
lib$broken_intron2   #make sure all CC
#generating broken sequence for each template
lib$broken_seq <- paste (lib$broken_intron1, lib$exon, lib$broken_intron2, sep="")
# Mutate intron lengths back to strand-agnostic mode
lib$seq_sense <- lib$seq
###################################################################################
################## Convert to DNAString object ####################################
###################################################################################
lib$seq_sense <- parallel::mclapply(lib$seq_sense, DNAString)
lib$broken_seq <- parallel::mclapply(lib$broken_seq, DNAString)
###################################################################################
###################################################################################
lib <- lib %>%
mutate (
seq_sense = ifelse ( (strand == "-"), parallel::mclapply(seq_sense, reverseComplement), seq_sense ),   # for coordinate-based parsing in main SNP replacement
intron2_len = ifelse ( (strand == "-"), (170 - exon_len - intron2_len), intron2_len),    # Mutate intron lengths back to strand-agnostic mode
intron1_len = ifelse ( (strand == "-"), (170 - exon_len - intron1_len), intron1_len) )   # Mutate intron lengths back to strand-agnostic mode
# subsetting vcf for testing
# vcf <- vcf[1:20,]
# intron and exon lengths INFO for "i"
len_header <- function(len1, len2, len3) {paste("len=", len1, ".", len2, ".", len3, sep = "") }
xtron_len <- mapply(len_header, lib$intron1_len, lib$exon_len, lib$intron2_len)
# location INFO parse for "i"
loc_parse <- function(chr, start, end) {paste("chr", chr, ":", start, "-", end, sep = "") }
loc_info <- mapply(loc_parse, lib$chr, lib$lib.seq_region_start, lib$lib.seq_region_end, USE.NAMES=FALSE)
# SEQ "i" info
basic_seq_info <-paste(loc_info, "strand=", lib$strand, xtron_len)
# SNP INFO parse for "j"
vcf_header <- function(ref, alt, pos) {paste("ref=", ref, "alt=", alt, "pos=", pos, sep = " ") }
SNP_info <- mapply(vcf_header, vcf$ref, vcf$alt, vcf$pos, USE.NAMES=FALSE)
#######################################
############## SUBPOOL 1 ##############
#######################################
subpoo1_1_assembly <- function(x) { DNAStringSet ( parallel::mclapply ( x, function(x) (xscat(primerRE_1_5, x, REprimer_1_3 )) ) )}
# NATURAL LIBRARY (SUBPOOL 1)
nat_lib <- subpoo1_1_assembly(lib$seq)
# CONTROLS (SUBPOOL 1)
random_exon <- subpoo1_1_assembly(random_exon_temp)
skip <- subpoo1_1_assembly(lib_skip$seq)
int <- subpoo1_1_assembly(lib_int$seq)
broken_seq <- subpoo1_1_assembly(lib$broken_seq)
#######################################
############## SUBPOOL 2 ##############
#######################################
subpoo1_2_assembly <- function(x) { DNAStringSet ( parallel::mclapply ( x, function(x) (xscat( primerRE_2_5, x, REprimer_2_3 )) ) )}
# NATURAL LIBRARY (SUBPOOL 1)
nat_lib_backup <- subpoo1_2_assembly(lib$seq)
# CONTROLS (SUBPOOL 1)
random_exon_backup <- subpoo1_2_assembly(random_exon_temp)
skip_backup <- subpoo1_2_assembly(lib_skip$seq)
int_backup <- subpoo1_2_assembly(lib_int$seq)
broken_seq_backup <- subpoo1_2_assembly(lib$broken_seq)
nat_header <- function(id, info) {paste( id, "_", "000", " ", info, sep = "") }
nat_seq_info  <- mapply( nat_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
broken_header <- function(id, info) {paste( id, "_", "BRK", " ", info, " ", "ref: A,G; alt= T,T", " ", "ref= G,T; alt= C,C", sep = "") }
broken_seq_info  <- mapply( broken_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
skip_header <- function(id, info) {paste( id, "_", "SKP", " ", info, sep = "") }
skip_seq_info  <- mapply( skip_header, lib$ensembl_id, basic_seq_info, USE.NAMES=FALSE )
#function for naming entries of DNAStringSet or lists
nameDNAStringSet <- function(sub_lib,sub_info) {
for (i in 1:length(sub_lib))
{
names(sub_lib)[i] <- sub_info[i]
}
return(sub_lib)
}
#naming natural template libraries and controls related to natural templates
nat_lib <- nameDNAStringSet( nat_lib, nat_seq_info )
skip <- nameDNAStringSet( skip, skip_seq_info )
int <- nameDNAStringSet( int, nat_seq_info )
broken_seq <- nameDNAStringSet( broken_seq, broken_seq_info )
nat_lib_backup <- nameDNAStringSet( nat_lib_backup, nat_seq_info )     #naming each entry of natural library
skip_backup <- nameDNAStringSet( skip_backup, skip_seq_info )
int_backup <- nameDNAStringSet( int_backup, nat_seq_info )
broken_seq_backup <- nameDNAStringSet( broken_seq_backup, broken_seq_info )
rm(df)
rm(df.id)
writeXStringSet(nat_lib, file="./exac_lib/originalSeq_nat_lib.fasta", format="fasta", width=300)
writeXStringSet(skip, file="./exac_lib/originalSeq_skip.fasta", format="fasta", width=300)
writeXStringSet(broken_seq, file="./exac_lib/originalSeq_broken.fasta", format="fasta", width=300)
writeXStringSet(random_exon, file="./exac_lib/originalSeq_random.fasta", format="fasta", width=300)
# system("wc -l ./exac_lib/201605_exac_lib.fasta")
getwd()
setwd("/Users/martian/g/dev/splc_RC/exac_library/exac_lib")
exac_ref_untrimmed <- readDNAStringSet("~/g/dev/splc_RC/exac_library/exac_lib/exac_ref_untrimmed_all.fasta",
format="fasta",nrec=-1L, skip=0L, seek.first.rec=FALSE, use.names=TRUE)
exac_ref_trimmed <- subseq(exac_ref_untrimmed, start = 22, end = 191)
seq_name = names(exac_ref_trimmed)
sequence = paste(exac_ref_trimmed)
exac_ref_trimmed <- data.frame(seq_name, sequence)
exac_ref_trimmed_formatted <- exac_ref_trimmed %>%
separate(seq_name, c("id", "rest"), " chr") %>%
mutate(sequence = as.character(sequence))
write.table(exac_ref_trimmed_formatted, '~/splicing_paper/ref/exac/exac_ref_original_seq.txt', sep = '\t', quote = F, row.names = F)
setwd("'~/splicing_paper/ref/exac/")
setwd("~/splicing_paper/ref/exac/")
source('~/splicing_paper/process_scripts/exac/exac_format_ref.R', echo=TRUE)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref2 <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq))
ref3 <- ref2 %>%
select(id, sequence, original_seq)
View(ref3)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq))
ref <- ref %>%
select(id, original_seq, mixed_seq = sequence)
write.table('exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq)) %>%
select(id, original_seq, mixed_seq = sequence)
write.table('exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq)) %>%
select(id, original_seq, mixed_seq = sequence)
write.table('exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq)) %>%
select(id, original_seq, mixed_seq = sequence)
write.table('../../ref/exac/exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
getwd()
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq)) %>%
select(id, original_seq, mixed_seq = sequence)
write.table(ref, '../../ref/exac/exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq),
mixed_seq = sequence)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq),
mixed_seq = sequence)
View(ref)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq),
mixed_seq = sequence)
write.table(ref, '../../ref/exac/exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
View(ref)
ref <- read.table('../../ref/exac/exac_ref_formatted_converted.txt',
sep = '\t', header = T)
exac_ref_original_seq <- read.table('../../ref/exac/exac_ref_original_seq.txt',
sep = '\t', header = T) %>%
select(id, original_seq = sequence)
ref <- ref %>%
left_join(exac_ref_original_seq, by = 'id') %>%
mutate(original_seq = ifelse(is.na(original_seq), sequence, original_seq),
mixed_seq = sequence) %>%
arrange(id, sub_id)
write.table(ref, '../../ref/exac/exac_ref_formatted_converted_original_seq.txt',
sep = '\t', quote = F, row.names = F)
View(ref)
